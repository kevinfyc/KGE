/*
* Viry3D
* Copyright 2014-2017 by Stack - stackos@qq.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

precision mediump float;

UniformTexture(1, 1) uniform sampler2D _Lightmap;
UniformTexture(0, 3) uniform sampler2D _MainTex;
UniformTexture(0, 5) uniform sampler2D _Normal;
UniformTexture(0, 6) uniform sampler2D _SpecMap;
UniformTexture(0, 7) uniform sampler2D _Emissive;
UniformTexture(0, 8) uniform sampler2D _NHxRoughness;

UniformBuffer(0, 4) uniform buf_ps {
	vec4 _Color;
	vec4 _Spec;
	vec4 _Smoothness;
	vec4 _EmissiveColor;
	vec4 _WorldSpaceLightPos;
	vec4 _LightColor;
	vec4 _WorldSpaceCameraPos;
	vec4 _IntensityColor;
} u_buf;

Varying(0) in vec2 v_uv;
Varying(1) in vec2 v_uv2;
Varying(2) in vec4 v_t2w0;
Varying(3) in vec4 v_t2w1;
Varying(4) in vec4 v_t2w2;

layout (location = 0) out vec4 o_frag;

vec2 pow4(vec2 x) { return x * x * x * x; }

void main() {
	vec4 c_base = texture(_MainTex, v_uv);
	vec4 c = c_base * u_buf._Color;
	vec3 n = texture(_Normal, v_uv).rgb * 2.0 - 1.0;
	vec4 lm = texture(_Lightmap, v_uv2) * 2.0;
	vec4 spec_map = texture(_SpecMap, v_uv);
	vec3 emissive = texture(_Emissive, v_uv).rgb * u_buf._EmissiveColor.rgb;

	vec3 pos = vec3(v_t2w0.w, v_t2w1.w, v_t2w2.w);
	vec3 normal = normalize(vec3(dot(v_t2w0.xyz, n), dot(v_t2w1.xyz, n), dot(v_t2w2.xyz, n)));
	vec3 light_dir = normalize(u_buf._WorldSpaceLightPos.rgb - pos * u_buf._WorldSpaceLightPos.w);
	vec3 view_dir = normalize(u_buf._WorldSpaceCameraPos.rgb - pos);
	vec3 light_color = u_buf._LightColor.rgb;
	
	float nl = max(dot(normal, light_dir), 0.0);
	vec3 h = normalize(light_dir + view_dir);
	float nh = max(dot(normal, h), 0.0);
	float nv = max(dot(normal, view_dir), 0.0);
	vec3 ref = reflect(view_dir, normal);
	
	vec3 spec_color = u_buf._Spec.rgb * spec_map.rgb;
	float smoothness = u_buf._Smoothness.x * spec_map.a;
	float rlp4 = pow4(vec2(dot(ref, light_dir), 1.0 - nv)).x;
	float spec = texture(_NHxRoughness, vec2(rlp4, smoothness)).r * 16.0;
	
	vec3 lightmap = c.rgb * lm.rgb;
	vec3 diffuse = c.rgb * light_color * nl;
	vec3 specular = light_color * spec * spec_color;
	vec3 intensity = c_base.rgb * u_buf._IntensityColor.rgb;
	
	c.rgb = lightmap + diffuse + specular + intensity + emissive;

	o_frag = c;
}

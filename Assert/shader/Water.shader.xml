<Shader name="Water" queue="Transparent">
	<VertexShader name="vs">
		<UniformBuffer name="buf_vs" binding="2">
			<Uniform name ="_ViewProjection" size="64"/>
		</UniformBuffer>
		
		<VertexAttribute name="Vertex" location="0"/>
		<VertexAttribute name="Texcoord" location="1"/>

		<Include name="Base.in"/>
		<Source>
UniformBuffer(1, 0) uniform buf_vs_obj {
	mat4 _World;
} u_buf_obj;

UniformBuffer(0, 2) uniform buf_vs {
	mat4 _ViewProjection;
} u_buf;

layout (location = 0) in vec4 a_pos;
layout (location = 1) in vec2 a_uv;

Varying(0) out vec2 v_uv;

void main() {
	gl_Position = a_pos * u_buf_obj._World * u_buf._ViewProjection;
	v_uv = a_uv;

	vulkan_convert();
}
		</Source>
	</VertexShader>

	<PixelShader name="ps">
		<Sampler name="_MainTex" binding="3"/>
		
		<UniformBuffer name="buf_ps" binding="4">
			<Uniform name ="_Color" size="16"/>
			<Uniform name ="_MainTex_ST" size="16"/>
			<Uniform name ="_Time" size="16"/>
			<Uniform name ="_Speed" size="16"/>
			<Uniform name ="_Distort" size="16"/>
			<Uniform name ="_Intensity" size="16"/>
			<Uniform name ="_Alpha" size="16"/>
		</UniformBuffer>
		
		<Source>
precision mediump float;
      
UniformTexture(0, 3) uniform sampler2D _MainTex;

UniformBuffer(0, 4) uniform buf_ps {
	vec4 _Color;
	vec4 _MainTex_ST;
	vec4 _Time;
	vec4 _Speed;
	vec4 _Distort;
	vec4 _Intensity;
	vec4 _Alpha;
} u_buf;

Varying(0) in vec2 v_uv;

layout (location = 0) out vec4 o_frag;

void main() {
	float time = u_buf._Time.x * u_buf._Speed.x;

	vec2 st_0 = (v_uv + time * vec2(0.0, 0.05));
	vec2 uv_0 = u_buf._MainTex_ST.xy * st_0 + u_buf._MainTex_ST.zw;
    vec4 color_0 = texture(_MainTex, uv_0);

	vec2 st_1 = (v_uv + time * vec2(-0.01, 0.05));
	vec2 uv_1 = u_buf._MainTex_ST.xy * st_1 + u_buf._MainTex_ST.zw;
    vec4 color_1 = texture(_MainTex, uv_1);
	
	vec2 st_2 = v_uv + time * vec2(0.03, 0.03) + color_0.rg * color_1.rg * u_buf._Distort.x;
	vec2 uv_2 = u_buf._MainTex_ST.xy * st_2 + u_buf._MainTex_ST.zw;
	vec4 color_2 = texture(_MainTex, uv_2);
	
	vec3 color_3 = u_buf._Color.rgb * color_2.rgb * u_buf._Intensity.x;
	
    o_frag = vec4(color_3, (color_2.b * u_buf._Alpha.x));
}
		</Source>
	</PixelShader>

	<RenderState name="rs">
		<Cull value="Off"/>
		<ZWrite value="Off"/>
		<Blend src="SrcAlpha"
			   dst="OneMinusSrcAlpha"/>
	</RenderState>

	<Pass name="pass"
		  vs="vs"
		  ps="ps"
		  rs="rs"/>
</Shader>
